/**
 * 🏗️ EhrMappingService - Service for Handling EHR Mapping Operations
 *
 * This class provides a higher-level abstraction for EHR mapping functionality.
 * It acts as an intermediary between the application layer and the domain layer, ensuring that
 * operations related to EHR mappings are properly managed. The service interacts with the 
 * `EhrMappingRepository` to persist EHR mapping data and can be used by controllers or other parts 
 * of the application to initiate these operations.
 *
 * 🏛️ **Role in Hexagonal Architecture:**
 * - 🎯 **Application Layer (Service):** Acts as a service layer that implements the business logic 
 *   related to EHR mappings. It orchestrates operations by interacting with the domain layer.
 * - 🔌 **Decouples Domain Logic from Persistence:** This service utilizes the `EhrMappingRepository` to 
 *   perform persistence operations, keeping the domain logic agnostic to the specific storage mechanisms.
 * - 🚀 **Separation of Concerns:** By using this service, the application layer can focus on higher-level 
 *   logic and business rules without being concerned with persistence details.
 * - 🧩 **Flexible Integration:** The service is designed to be flexible and extensible, allowing for 
 *   future business logic to be added or adjusted without changing the underlying persistence layer.
 */
export class EhrMappingService {
  /**
   * 🏛️ **Constructor:** 
   * Initializes the `EhrMappingService` by injecting the `EhrMappingRepository`.
   *
   * @param {EhrMappingRepository} ehrMappingRepository - The repository responsible for 
   * persisting and retrieving EHR mappings from the data store.
   */
  constructor(private ehrMappingRepository: EhrMappingRepository) {}

  /**
   * 📝 **Create EHR Mapping:** 
   * Method to create a new EHR mapping entry. The `data` provided excludes the `id`, 
   * which is generated by the database.
   *
   * @param {Omit<EhrMapping, "id">} data - The data needed to create a new EHR mapping (without the `id`).
   * @returns {Promise<EhrMapping>} - A promise that resolves with the newly created `EhrMapping` entity 
   * with an assigned `id`.
   *
   * 🔹 **Responsibilities:**
   * - Ensures that the `create` operation is abstracted and consistently handled.
   * - Calls the `EhrMappingRepository` to persist the EHR mapping, following the domain-driven design approach.
   * - Returns the created `EhrMapping` entity for further use in the application.
   */
  async createEhrMapping(data: Omit<EhrMapping, "id">): Promise<EhrMapping> {
    return this.ehrMappingRepository.create(data);
  }
}
