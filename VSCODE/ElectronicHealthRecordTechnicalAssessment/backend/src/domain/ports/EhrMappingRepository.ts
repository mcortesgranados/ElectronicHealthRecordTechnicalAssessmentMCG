/**
 * 🏗️ EhrMappingRepository - Repository Interface for EHR Field Mappings
 *
 * This interface defines the contract for interacting with EHR mapping data.
 * It follows the **Hexagonal Architecture (Ports & Adapters Pattern)** by acting as a **Port** 
 * that decouples the domain layer from the infrastructure (database).
 *
 * 🏛️ **Role in Hexagonal Architecture:**
 * - 🎯 **Application Layer (Port):** Defines the operations available for EHR mappings.
 * - 🔌 **Decoupling Business Logic from Persistence:** Keeps the domain layer independent 
 *   of database-specific details.
 * - 🏛 **Implemented by an Adapter (Repository Implementation):** Concrete classes in the 
 *   **Infrastructure Layer** provide actual database interactions.
 * - 🚀 **Flexibility:** Allows switching storage mechanisms (SQL, NoSQL, APIs) without 
 *   affecting business logic.
 */
export interface EhrMappingRepository {
  /**
   * 📝 Creates a new EHR mapping entry.
   *
   * @param {Omit<EhrMapping, "id">} ehrMapping - The EHR mapping data excluding the ID (generated by DB).
   * @returns {Promise<EhrMapping>} - The created `EhrMapping` entity with an assigned ID.
   *
   * 🔹 **Responsibilities:**
   * - Ensures persistence of a new EHR mapping entity.
   * - Provides a standard interface for different storage implementations.
   */
  create(ehrMapping: Omit<EhrMapping, "id">): Promise<EhrMapping>;
}
