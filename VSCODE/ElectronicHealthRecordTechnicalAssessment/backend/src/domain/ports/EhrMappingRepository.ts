/**
 * 🏗️ EhrMappingRepository - Repository Interface for EHR Field Mappings
 *
 * This interface defines the contract for interacting with EHR mapping data.
 * It follows the **Hexagonal Architecture (Ports & Adapters Pattern)** by acting as a **Port** 
 * that decouples the domain layer from the infrastructure (database).
 *
 * 🏛️ **Role in Hexagonal Architecture:**
 * - 🎯 **Application Layer (Port):** Defines the operations available for EHR mappings.
 * - 🔌 **Decoupling Business Logic from Persistence:** Keeps the domain layer independent 
 *   of database-specific details.
 * - 🏛 **Implemented by an Adapter (Repository Implementation):** Concrete classes in the 
 *   **Infrastructure Layer** provide actual database interactions.
 * - 🚀 **Flexibility:** Allows switching storage mechanisms (SQL, NoSQL, APIs) without 
 *   affecting business logic.
 * - 🧑‍🔧 **Facilitates Testability:** As a port, this interface enables easier testing by allowing 
 *   mock implementations to be used during unit tests, ensuring business logic can be tested 
 *   independently of infrastructure concerns.
 */
export interface EhrMappingRepository {
  /**
   * 📝 Creates a new EHR mapping entry.
   *
   * @param {Omit<EhrMapping, "id">} ehrMapping - The EHR mapping data excluding the ID (generated by DB).
   * @returns {Promise<EhrMapping>} - The created `EhrMapping` entity with an assigned ID.
   *
   * 🔹 **Responsibilities:**
   * - Ensures persistence of a new EHR mapping entity.
   * - Provides a standard interface for different storage implementations.
   * - 🚀 **Adaptability:** This method can be implemented to persist data across a variety of storage 
   *   systems (SQL, NoSQL, etc.), without the domain layer needing to change.
   */
  create(ehrMapping: Omit<EhrMapping, "id">): Promise<EhrMapping>;

  /**
   * 🔍 Finds EHR mappings by EHR name.
   *
   * @param {string} ehrName - The EHR system's name to search for mappings.
   * @returns {Promise<EhrMapping[]>} - A list of `EhrMapping` entities associated with the provided name.
   *
   * 🔹 **Responsibilities:**
   * - Retrieves EHR mapping data based on specific criteria (EHR system name).
   * - Ensures querying of data while maintaining independence from the underlying data store.
   * - 🔌 **Abstracts Infrastructure Details:** The actual query mechanism (SQL queries, NoSQL filters) 
   *   is abstracted behind the repository interface, ensuring that the application logic remains agnostic 
   *   to infrastructure specifics.
   */
  findByEhrName(ehrName: string): Promise<EhrMapping[]>;
  findByEhrNameQuery(ehrName: string): Promise<EhrMapping[]>
}
