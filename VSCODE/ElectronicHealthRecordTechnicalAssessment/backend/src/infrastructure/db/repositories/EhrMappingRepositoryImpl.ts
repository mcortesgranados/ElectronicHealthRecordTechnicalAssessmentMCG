import { EhrMappingRepository } from "../../../domain/ports/EhrMappingRepository";
import { EhrMappingModel } from "../models/EhrMappingModel";
import { EhrMapping } from "../../../domain/entities/EhrMapping";

/**
 * 🏗️ EhrMappingRepositoryImpl - Implementation of EhrMappingRepository
 *
 * This class is responsible for handling the persistence of `EhrMapping` entities.
 * It acts as an **adapter** in the Hexagonal Architecture, bridging the gap between
 * the domain layer and the infrastructure layer (database).
 *
 * 🏛️ **Role in Hexagonal Architecture:**
 * - 🎯 **Infrastructure Layer (Adapter):** Implements the `EhrMappingRepository` interface.
 * - 🔌 **Port Implementation:** Acts as a concrete repository for database operations.
 * - 🗄 **Persistence Handling:** Uses `EhrMappingModel` (ORM) to store and retrieve data.
 * - 🚀 **Decoupling:** Keeps the domain logic clean by isolating database-specific details.
 */
export class EhrMappingRepositoryImpl implements EhrMappingRepository {

  /**
   * 📝 Creates a new EHR mapping entry in the database.
   *
   * @param {Omit<EhrMapping, "id">} ehrMapping - The EHR mapping data excluding the ID (generated by DB).
   * @returns {Promise<EhrMapping>} - The created `EhrMapping` entity with an assigned ID.
   *
   * 🔹 **Responsibilities:**
   * - Receives an `EhrMapping` object without an ID.
   * - Uses `EhrMappingModel` (ORM) to persist the entity.
   * - Returns the stored entity with an assigned ID.
   *
   * 🔄 **Hexagonal Architecture Role:**
   * - 🎯 Acts as an implementation of the port (`EhrMappingRepository`), interacting with the database.
   * - 🔌 The domain layer is decoupled from the database by utilizing this adapter class.
   */
  async create(ehrMapping: Omit<EhrMapping, "id">): Promise<EhrMapping> {
    const result = await EhrMappingModel.create(ehrMapping);
    return new EhrMapping(
      result.id,
      result.ehr_name,
      result.question_key,
      result.ehr_field,
      // result.created_at,
      // result.updated_at
    );
  }

  /**
   * 📝 Fetches EHR mappings by EHR system name.
   *
   * @param {string} ehrName - The name of the EHR system to filter mappings by.
   * @returns {Promise<EhrMapping[]>} - List of `EhrMapping` entities matching the `ehr_name`.
   *
   * 🔹 **Responsibilities:**
   * - Receives an `ehr_name` parameter to filter mappings.
   * - Uses `EhrMappingModel` (ORM) to query the database for matching records.
   * - Returns a list of `EhrMapping` entities.
   *
   * 🔄 **Hexagonal Architecture Role:**
   * - 🎯 Serves as an adapter for querying data from the infrastructure layer (database).
   * - 🔌 Keeps the domain layer free from direct database dependencies, allowing for flexibility.
   */
  async findByEhrName(ehrName: string): Promise<EhrMapping[]> {
    const results = await EhrMappingModel.findAll({
      where: { ehr_name: ehrName },
    });
    return results.map(
      (result) =>
        new EhrMapping(
          result.id,
          result.ehr_name,
          result.question_key,
          result.ehr_field
          //result.created_at,
          //result.updated_at
        )
    );
  }

    /**
   * 📝 Fetches EHR mappings by EHR system name.
   *
   * @param {string} ehrName - The name of the EHR system to filter mappings by.
   * @returns {Promise<EhrMapping[]>} - List of `EhrMapping` entities matching the `ehr_name`.
   *
   * 🔹 **Responsibilities:**
   * - Receives an `ehr_name` parameter to filter mappings.
   * - Uses `EhrMappingModel` (ORM) to query the database for matching records.
   * - Returns a list of `EhrMapping` entities.
   *
   * 🔄 **Hexagonal Architecture Role:**
   * - 🎯 Serves as an adapter for querying data from the infrastructure layer (database).
   * - 🔌 Keeps the domain layer free from direct database dependencies, allowing for flexibility.
   */
  async findByEhrNameQuery(ehrName: string): Promise<EhrMapping[]> {
    // Querying the database using the `ehr_name` filter
    const results = await EhrMappingModel.findAll({
      where: { ehr_name: ehrName },
    });

    // Returning the filtered list of `EhrMapping` entities
    return results.map(
      (result) =>
        new EhrMapping(
          result.id,
          result.ehr_name,
          result.question_key,
          result.ehr_field
          //result.created_at,
          //result.updated_at
        )
    );
  }

  
}
